#!/usr/bin/env python3
"""
Main Python script to visualize monitoring metrics
"""

import argparse
import logging
import os
import sys
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np

parent_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, parent_dir)

from benchmon.visualization import system_metrics, visualizer
from benchmon.visualization import power_metrics
from benchmon.visualization import call_profile


FIGURE_WIDTH = 25.6 # 34.4 # 19.2 #
FIGURE_HEIGHT_UNIT = 3


def parsing():
    """
    Parse benchmonspc_visu arguments
    """
    # Parser
    parser = argparse.ArgumentParser()

    # Traces repo
    parser.add_argument("traces_repo", type=str, nargs="?", default="./", help="Traces repository path")

    # Dool system metrics
    parser.add_argument("--cpu", action="store_true", help="Visualize CPU")
    parser.add_argument("--cpu-all", action="store_true", help="Visualize all CPU cores")
    parser.add_argument("--cpu-freq", action="store_true", help="Visualize all CPU cores frequencies")
    parser.add_argument("--cpu-all-acc", action="store_true", help="Visualize all CPU cores accumulated")
    parser.add_argument("--cpu-cores-in", type=str, default="", help="CPU cores to display")
    parser.add_argument("--cpu-cores-out", type=str, default="", help="CPU cores to exclude")
    parser.add_argument("--mem", action="store_true", help="Visualize memory")
    parser.add_argument("--net", action="store_true", help="Visualize network")
    parser.add_argument("--io", action="store_true", help="Visualize io")
    parser.add_argument("--sys", action="store_true", help="Visualize all system data")

    # High-frequency system metrics
    parser.add_argument("--hf-cpu", action="store_true", help="Visualize CPU")
    parser.add_argument("--hf-cpu-all", action="store_true", help="Visualize all CPU cores")
    parser.add_argument("--hf-cpu-freq", action="store_true", help="Visualize all CPU cores frequencies")
    parser.add_argument("--hf-cpu-cores-full", type=str, default="", help="CPU cores to display")
    parser.add_argument("--hf-mem", action="store_true", help="Visualize memory")
    parser.add_argument("--hf-net", action="store_true", help="Visualize network activity")
    parser.add_argument("--hf-net-all", action="store_true", help="Visualize network activity of all interfaces ")
    parser.add_argument("--hf-net-rx-only", action="store_true", help="Visualize rx network only")
    parser.add_argument("--hf-net-tx-only", action="store_true", help="Visualize tx network only")
    parser.add_argument("--hf-net-data", action="store_true", help="Label network plot with total size of networked data")
    parser.add_argument("--hf-disk", action="store_true", help="Visualize disk activity")
    parser.add_argument("--hf-disk-iops", action="store_true", help="Visualize disk iops")
    parser.add_argument("--hf-disk-rd-only", action="store_true", help="Visualize disk read activity only")
    parser.add_argument("--hf-disk-wr-only", action="store_true", help="Visualize disk write activity only")
    parser.add_argument("--hf-disk-data", action="store_true", help="Label disk plot with total size of operated data")
    parser.add_argument("--hf-ib", action="store_true", help="Visualize infiniband activity")
    parser.add_argument("--hf-sys", action="store_true", help="Visualize all system data")

    # Power profile
    parser.add_argument("--pow-g5k", action="store_true", help="Visualize g5k power")
    parser.add_argument("--pow", action="store_true", help="Visualize power")

    # Callstack
    parser.add_argument("--inline-call", action="store_true", help="Visualize callstack inline within monitoring")
    parser.add_argument("--inline-call-cmd", type=str, default="", help="Inline command to visualize")
    parser.add_argument("--call", action="store_true", help="Visualize callstack")
    parser.add_argument("--call-depth", type=int, default=1, help="Callstack depth level")
    parser.add_argument('--call-depths', type=str, default="", help="Comma-separated depth levels")
    parser.add_argument('--call-cmd', type=str, default="", help="Command to visualize")

    # Time limits
    parser.add_argument("--start-time", type=str, help="Start time")
    parser.add_argument("--end-time", type=str, help="Start time")

    # Figures
    parser.add_argument("--interactive", action="store_true", help="Interactive visualization")
    parser.add_argument("--fig-path", type=str, help="Figure format")
    parser.add_argument("--fig-fmt", type=str, default="svg", help="Figure format")
    parser.add_argument("--fig-name", type=str, default="benchmon_fig", help="Figure name")
    parser.add_argument("--fig-dpi", type=str, default="unset", help="Quality of figure: low, medium, high")
    parser.add_argument("--fig-call-legend-ncol", type=int, default=8, help="Number of columns of call traces legend")

    parser.add_argument("--verbose", action="store_true", help="Enable debug information")

    args = parser.parse_args()

    return args


def create_logger(traces_repo: str, verbose: bool):
    """
    Create logging manager
    """
    logger = logging.getLogger("benchmon_logger")
    logger.setLevel(logging.DEBUG)
    fmt = f"<%(filename)s::%(funcName)s> [%(asctime)s] [%(levelname)s] %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"
    fmtter = logging.Formatter(fmt=fmt, datefmt=datefmt)

    file_handler = logging.FileHandler(f"{traces_repo}/benchmon-visu_{int(datetime.now().timestamp())}.log")
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(fmtter)

    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.DEBUG if verbose else logging.INFO)
    stream_handler.setFormatter(fmtter)

    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)

    return logger


def set_time_axis_limits(start_time, end_time, xlim):
    """
    Set time axis limits
    """
    fmt = "%Y-%m-%dT%H:%M:%S"
    if start_time:
        xlim[0] = datetime.strptime(start_time, fmt).timestamp()
    if end_time:
        xlim[1] = datetime.strptime(end_time, fmt).timestamp()
    xticks, xlim = system_metrics.create_plt_params(*tuple(xlim))

    return xticks, xlim

def main():
    """
    Main function
    """
    # Init
    args = parsing()
    traces_repo = args.traces_repo

    # Create logging
    logger = create_logger(traces_repo=traces_repo, verbose=args.verbose)
    logger.info(f"benchmon-visu processes traces on {traces_repo}")
    args_str = "benchmon-visu arguments: \n"
    for key, value in vars(args).items():
        args_str += f"\t--{key} {value}\n"
    logger.debug(f"{args_str}")


    measurement = visualizer.BenchmonVisualizer(args=args, logger=logger)

    hfsys_trace = measurement.load_measurements()
    xticks = hfsys_trace._xticks
    xlim = hfsys_trace._xlim
    xticks, xlim = set_time_axis_limits(start_time=args.start_time, end_time=args.end_time, xlim=xlim)

    # Load power data
    HOSTNAME = os.path.basename(os.path.realpath(traces_repo))[16:] #socket.getfqdn()
    if args.pow:
        power_trace = power_metrics.PerfPowerData(csv_filename=f"{traces_repo}/pow_report.csv")
    is_pow_g5k = args.pow_g5k
    if is_pow_g5k:
        power_g5k_trace = power_metrics.G5KPowerData(traces_dir=traces_repo)

    # Load call data
    call_depths = []
    inline_calls_prof = None
    if args.call or args.inline_call or args.inline_call_cmd:
        with open(f"{traces_repo}/mono_to_real_file.txt", "r") as file:
            mono_to_real_val = float(file.readline())
        call_raw = call_profile.PerfCallRawData(filename=f"{traces_repo}/call_report.txt")
        samples, cmds = call_raw.cmds_list()

        if args.call_cmd:
            cmd = args.call_cmd
        else:
            cmd = list(cmds.keys())[0]

        call_trace = call_profile.PerfCallData(cmd=cmd, samples=samples, m2r=mono_to_real_val)
        if args.call_depth:
            call_depths = [depth for depth in range(args.call_depth)]
        elif args.call_depths:
            call_depths = [int(depth) for depth in args.call_depths.split(",")]

        inline_calls_prof = visualizer.get_inline_calls_prof(args, logger, cmd, cmds, samples, mono_to_real_val)

    # Figure and subplots
    nsbp = measurement.n_hf_sys + (args.pow or is_pow_g5k) + args.call * (2 if len(call_depths) > 2 else 1)
    fig, axs = plt.subplots(nsbp, sharex=True)
    fig.set_size_inches(FIGURE_WIDTH, nsbp * FIGURE_HEIGHT_UNIT)
    fig.add_gridspec(nsbp, hspace=0)
    visualizer.run_plots(args, logger, nsbp, hfsys_trace, inline_calls_prof, xlim, xticks, power_trace, power_g5k_trace, system_metrics, call_depths, call_trace)

    fig.suptitle(f"{os.path.basename(os.path.realpath(traces_repo))[16:]}")
    plt.subplots_adjust(hspace=.5)
    plt.tight_layout()

    # Enable interactive plot
    if args.interactive:
        logger.debug("Start interactive session with matplotlib")
        plt.show()

    # Figure saving parameters
    dpi = {"unset": "figure", "low": 200, "medium": 600, "high": 1200}
    figpath = f"{traces_repo}" if args.fig_path is None else args.fig_path
    for fmt in args.fig_fmt.split(","):
        figname = f"{figpath}/{args.fig_name}.{fmt}"
        fig.savefig(figname, format=fmt, dpi=dpi[args.fig_dpi])
        logger.info(f"Figure saved: {os.path.realpath(figname)}")

    logger.info("benchmon-visu closes")

    return 0


if __name__ == "__main__":
    main()

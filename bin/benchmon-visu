#!/usr/bin/env python3
"""
Main Python script to visualize monitoring metrics
"""

import argparse
import logging
import os
import sys
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np

# @dbg
# import warnings
# warnings.simplefilter('error', RuntimeWarning)

# Add parent directory to PYTHONPATH
parent_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
print("Add parent directory to sys.path.")
sys.path.insert(0, parent_dir)

from benchmon.visualization import system_metrics, visualizer
from benchmon.visualization import power_metrics
from benchmon.visualization import call_profile

FIGURE_WIDTH = 25.6 # 34.4 # 19.2 #
FIGURE_HEIGHT_UNIT = 3

def parsing():
    """
    Parse benchmonspc_visu arguments
    """
    # Parser
    parser = argparse.ArgumentParser()

    # Traces repo
    parser.add_argument("traces_repo", type=str, nargs="?", default="./", help="Traces repository path")

    # Dool system metrics
    parser.add_argument("--cpu", action="store_true", help="Visualize CPU")
    parser.add_argument("--cpu-all", action="store_true", help="Visualize all CPU cores")
    parser.add_argument("--cpu-freq", action="store_true", help="Visualize all CPU cores frequencies")
    parser.add_argument("--cpu-all-acc", action="store_true", help="Visualize all CPU cores accumulated")
    parser.add_argument("--cpu-cores-in", type=str, default="", help="CPU cores to display")
    parser.add_argument("--cpu-cores-out", type=str, default="", help="CPU cores to exclude")
    parser.add_argument("--mem", action="store_true", help="Visualize memory")
    parser.add_argument("--net", action="store_true", help="Visualize network")
    parser.add_argument("--io", action="store_true", help="Visualize io")
    parser.add_argument("--sys", action="store_true", help="Visualize all system data")

    # High-frequency system metrics
    parser.add_argument("--hf-cpu", action="store_true", help="Visualize CPU")
    parser.add_argument("--hf-cpu-all", action="store_true", help="Visualize all CPU cores")
    parser.add_argument("--hf-cpu-freq", action="store_true", help="Visualize all CPU cores frequencies")
    parser.add_argument("--hf-cpu-cores-full", type=str, default="", help="CPU cores to display")
    parser.add_argument("--hf-mem", action="store_true", help="Visualize memory")
    parser.add_argument("--hf-net", action="store_true", help="Visualize network activity")
    parser.add_argument("--hf-net-all", action="store_true", help="Visualize network activity of all interfaces ")
    parser.add_argument("--hf-net-rx-only", action="store_true", help="Visualize rx network only")
    parser.add_argument("--hf-net-tx-only", action="store_true", help="Visualize tx network only")
    parser.add_argument("--hf-net-data", action="store_true", help="Label network plot with total size of networked data")
    parser.add_argument("--hf-disk", action="store_true", help="Visualize disk activity")
    parser.add_argument("--hf-disk-iops", action="store_true", help="Visualize disk iops")
    parser.add_argument("--hf-disk-rd-only", action="store_true", help="Visualize disk read activity only")
    parser.add_argument("--hf-disk-wr-only", action="store_true", help="Visualize disk write activity only")
    parser.add_argument("--hf-disk-data", action="store_true", help="Label disk plot with total size of operated data")
    parser.add_argument("--hf-ib", action="store_true", help="Visualize infiniband activity")

    parser.add_argument("--hf-sys", action="store_true", help="Visualize all system data")

    # Power profile
    parser.add_argument("--pow-g5k", action="store_true", help="Visualize g5k power")
    parser.add_argument("--pow", action="store_true", help="Visualize power")

    # Callstack
    parser.add_argument("--inline-call", action="store_true", help="Visualize callstack inline within monitoring")
    parser.add_argument("--inline-call-cmd", type=str, default="", help="Inline command to visualize")
    parser.add_argument("--call", action="store_true", help="Visualize callstack")
    parser.add_argument("--call-depth", type=int, default=1, help="Callstack depth level")
    parser.add_argument('--call-depths', type=str, default="", help="Comma-separated depth levels")
    parser.add_argument('--call-cmd', type=str, default="", help="Command to visualize")

    # Time limits
    parser.add_argument("--start-time", type=str, help="Start time")
    parser.add_argument("--end-time", type=str, help="Start time")

    # Figures
    parser.add_argument("--interactive", action="store_true", help="Interactive visualization")
    parser.add_argument("--fig-path", type=str, help="Figure format")
    parser.add_argument("--fig-fmt", type=str, default="svg", help="Figure format")
    parser.add_argument("--fig-name", type=str, default="benchmon_fig", help="Figure name")
    parser.add_argument("--fig-dpi", type=str, default="unset", help="Quality of figure: low, medium, high")
    parser.add_argument("--fig-call-legend-ncol", type=int, default=8, help="Number of columns of call traces legend")

    parser.add_argument("--verbose", action="store_true", help="Enable debug information")

    args = parser.parse_args()

    return args


def create_logger(traces_repo: str, verbose: bool):
    """
    Create logging manager
    """
    logger = logging.getLogger("benchmon_logger")
    logger.setLevel(logging.DEBUG)
    fmt = f"<%(filename)s::%(funcName)s> [%(asctime)s] [%(levelname)s] %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"
    fmtter = logging.Formatter(fmt=fmt, datefmt=datefmt)

    file_handler = logging.FileHandler(f"{traces_repo}/benchmon-visu_{int(datetime.now().timestamp())}.log")
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(fmtter)

    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.DEBUG if verbose else logging.INFO)
    stream_handler.setFormatter(fmtter)

    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)

    return logger


def main():
    """
    Main of benchmonspc_visu
    """
    args = parsing()
    traces_repo = args.traces_repo

    logger = create_logger(traces_repo=traces_repo, verbose=args.verbose)
    logger.info(f"benchmon-visu processes traces on {traces_repo}")
    args_str = "benchmon-visu arguments: \n"
    for key, value in vars(args).items():
        args_str += f"\t--{key} {value}\n"
    logger.debug(f"{args_str}")

    measurement = visualizer.BenchmonVisualizer(args=args, logger=logger)

    hfsys_trace = measurement.load_measurements()
    _xticks = hfsys_trace._xticks
    _xlim = hfsys_trace._xlim

    # Resize x-axis limit
    fmt = "%Y-%m-%dT%H:%M:%S"
    from datetime import datetime
    if args.start_time:
        _xlim[0] = datetime.strptime(args.start_time, fmt).timestamp()
    if args.end_time:
        _xlim[1] = datetime.strptime(args.end_time, fmt).timestamp()
    _xticks, _xlim = system_metrics.create_plt_params(*tuple(_xlim))

    _n_cores_full = len(args.hf_cpu_cores_full.split(",")) if is_hf_cores_full else 0
    n_hf_sys = is_hf_cpu + is_hf_cpu_all + is_hf_cpu_freq + _n_cores_full + is_hf_mem + is_hf_net + is_hf_disk + is_hf_ib

    # Load power data
    HOSTNAME = os.path.basename(os.path.realpath(traces_repo))[16:] #socket.getfqdn()
    if args.pow:
        power_trace = power_metrics.PerfPowerData(csv_filename=f"{traces_repo}/pow_report.csv")
    is_pow_g5k = args.pow_g5k
    if is_pow_g5k:
        power_g5k_trace = power_metrics.G5KPowerData(traces_dir=traces_repo)

    # Load call data
    call_depths = []
    inline_calls_prof = None
    if args.call or args.inline_call or args.inline_call_cmd:
        with open(f"{traces_repo}/mono_to_real_file.txt", "r") as file:
            mono_to_real_val = float(file.readline())
        call_raw = call_profile.PerfCallRawData(filename=f"{traces_repo}/call_report.txt")
        samples, cmds = call_raw.cmds_list()

        if args.call_cmd:
            cmd = args.call_cmd
        else:
            cmd = list(cmds.keys())[0]

        call_trace = call_profile.PerfCallData(cmd=cmd, samples=samples, m2r=mono_to_real_val)
        if args.call_depth:
            call_depths = [depth for depth in range(args.call_depth)]
        elif args.call_depths:
            call_depths = [int(depth) for depth in args.call_depths.split(",")]


        # Hard-coded system command to remove
        kernel_calls = [
            "swapper", "bash", "awk", "cat", "date", "grep", "sleep", "perf_5.10", "perf", "prometheus-node",
            "htop", "kworker", "dbus-daemon", "ipmitool", "slurmstepd", "rcu_sched", "ldlm_bl", "socknal",
            "systemd", "snapd", "apparmor", "sed", "kswap", "queue"
        ]

        # Create list of keys for user calls (remove command if less thant 5% of the larger command)
        if args.inline_call_cmd:
            user_calls_keys = args.inline_call_cmd.split(",")

        else:
            INLINE_CMDS_THRESHOLD = 0.01
            user_calls_keys = []
            for key in cmds:
                if cmds[key] / cmds[cmd] > INLINE_CMDS_THRESHOLD:
                    user_calls_keys += [key]

            # print(f"{user_calls_keys = }") # @dbg
            user_calls_keys_raw = user_calls_keys.copy()
            for command in user_calls_keys_raw:
                for kcall in kernel_calls:
                    if kcall in command:
                        user_calls_keys.remove(command)
                        break

        inline_calls_prof = {key: [] for key in user_calls_keys}

        # DEBUG
        msg = "Inline commands:\n"
        for cmd in user_calls_keys:
            msg += f"\t{cmd}: {cmds[cmd]} samples\n"
        logger.debug(msg)


        for sample in samples:
            if sample["cmd"] in user_calls_keys: # and  sample["cpu"] == "[000]":
                inline_calls_prof[sample["cmd"]] += [sample["timestamp"] + mono_to_real_val]

        # Remove duplicated wrt decimal
        ROUND_VAL = 2
        msg = "Inline commands (Lightened):\n"
        for cmd in user_calls_keys:
            inline_calls_prof[cmd] = np.unique(np.array(inline_calls_prof[cmd]).round(ROUND_VAL))
            msg += f"\t{cmd}: {len(inline_calls_prof[cmd])} samples\n"
        logger.debug(msg)

    # Figure and subplots
    nsbp = n_sys + n_hf_sys + (args.pow or is_pow_g5k) + args.call * (2 if len(call_depths) > 2 else 1)
    sbp = 1

    fig, axs = plt.subplots(nsbp, sharex=True)
    fig.set_size_inches(FIGURE_WIDTH, nsbp * FIGURE_HEIGHT_UNIT)
    fig.add_gridspec(nsbp, hspace=0)

    # (HF) CPU plot
    if is_hf_cpu:
        logger.debug("Plotting (hf) cpu")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_cpu(calls=inline_calls_prof)

    # (HF) Full individual core plot
    if is_hf_cores_full:
        for core_number in args.hf_cpu_cores_full.split(","):
            logger.debug(f"Plotting (hf) full cpu core {core_number}")
            ax = plt.subplot(nsbp, 1, sbp); sbp += 1
            hfsys_trace.plot_hf_cpu(core_number)


    # (HF) CPU per core plot
    if is_hf_cpu_all:
        logger.debug("Plotting (hf) cpu per core")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_cpu_per_core(cores_in=args.cpu_cores_in, cores_out=args.cpu_cores_out, calls=inline_calls_prof)



    # (HF) CPU cores frequency plot
    if is_hf_cpu_freq:
        logger.debug("Plotting (hf) cpu cores frequency")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_cpufreq(cores_in=args.cpu_cores_in, cores_out=args.cpu_cores_out, calls=inline_calls_prof)



    # (HF) Memory/swap plot
    if is_hf_mem:
        logger.debug("Plotting (hf) memory/swap")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_memory_usage(xticks=_xticks, xlim=_xlim, calls=inline_calls_prof)

    # (HF) Network plot
    if is_hf_net:
        logger.debug("Plotting (hf) network")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_network(xticks=_xticks, xlim=_xlim, calls=inline_calls_prof, all_interfaces=is_hf_net_all,
                                    is_rx_only=args.hf_net_rx_only, is_tx_only=args.hf_net_tx_only, is_netdata_label=args.hf_net_data)

    # (HF) Infiniband plot
    if is_hf_ib:
        logger.debug("Plotting (hf) infiniband")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_ib(xticks=_xticks, xlim=_xlim, calls=inline_calls_prof)


    # (HF) Disk plot
    if is_hf_disk:
        logger.debug("Plotting (hf) disk")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        hfsys_trace.plot_hf_disk(xticks=_xticks, xlim=_xlim, calls=inline_calls_prof, is_with_iops=args.hf_disk_iops,
                                 is_rd_only=args.hf_disk_rd_only, is_wr_only=args.hf_disk_wr_only, is_diskdata_label=args.hf_disk_data)

    # (perf) Power plot
    if args.pow or is_pow_g5k:
        logger.debug("Plotting perf power")
        ax = plt.subplot(nsbp, 1, sbp); sbp += 1
        _ymax_pow = [0]
        if args.pow:
            _ymax_pow += [power_trace.plot_events(xticks=_xticks, xlim=_xlim)]
        if is_pow_g5k:
            _ymax_pow += [power_g5k_trace.plot_g5k_pow_profiles(xticks=_xticks, xlim=_xlim)]
        if inline_calls_prof:
            system_metrics.plot_inline_calls(inline_calls_prof, ymax=max(_ymax_pow), xlim=_xlim)
        plt.xticks(_xticks[0], _xticks[1])
        plt.xlim(_xlim)
        plt.ylabel("Power (W)")
        plt.legend(loc=1)
        plt.grid()

    # (perf) Calltrace plot
    if args.call:
        logger.debug("Plotting perf call graph")
        plt.subplot(nsbp, 1, (sbp,sbp+1), sharex=ax)
        call_trace.plot(call_depths, xticks=_xticks, xlim=_xlim, legend_ncol=args.fig_call_legend_ncol)

    fig.suptitle(f"{os.path.basename(os.path.realpath(traces_repo))[16:]}")
    plt.subplots_adjust(hspace=.5)
    plt.tight_layout()

    # Enable interactive plot
    if args.interactive:
        logger.debug("Start interactive session with matplotlib")
        plt.show()

    # Figure saving parameters
    dpi = {"unset": "figure", "low": 200, "medium": 600, "high": 1200}
    figpath = f"{traces_repo}" if args.fig_path is None else args.fig_path
    for fmt in args.fig_fmt.split(","):
        figname = f"{figpath}/{args.fig_name}.{fmt}"
        fig.savefig(figname, format=fmt, dpi=dpi[args.fig_dpi])
        logger.info(f"Figure saved: {os.path.realpath(figname)}")

    logger.info("benchmon-visu closes")

    return 0


if __name__ == "__main__":
    main()

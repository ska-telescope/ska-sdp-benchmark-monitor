#!/usr/bin/env python3
""" Main script to monitor benchmark metrics from SDP benchmark runs. """
import argparse
import sys
import os


# Add parent directory to PYTHONPATH
parent_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
print("Add parent directory to sys.path.")
sys.path.insert(0, parent_dir)

try:
    import benchmon
    import benchmon.run as rc
except ImportError as e:
    print("Could not import benchmon!")
    print(sys.executable, sys.version)
    print('sys.path:')
    for i in range(len(sys.path)):
        print('%2d) %s' % (i + 1, sys.path[i]))
    raise

JOBID = os.getenv("SLURM_JOB_ID") or os.getenv("OAR_JOB_ID")
HOSTNAME = os.uname()[1]
PID = os.getpid()

def parse_args():
    parser = argparse.ArgumentParser()

    # add arguments
    parser.add_argument(
        "-d",
        "--save-dir",
        default=f"{os.getcwd()}",
        help='''Base directory where metrics will be saved.
        Inside this directory, a directory called "benchmon_traces_$HOSTNAME" will be created per host.
        In the end, they will be merged into a single directory: "benchmon_traces".
        This directory must be available from all compute nodes.
        '''
    )

    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        default=False,
        help="Enable verbose mode. Display debug messages",
    )

    parser.add_argument(
        '--dool',
        type=str,
        default="",
        help="Path to the dool executable. If unset, a dool executable is searched in the PATH"
    )

    parser.add_argument(
        "--system",
        "--sys",
        action="store_true",
        help="Enable system monitoring"
    )

    parser.add_argument(
        "--system-sampling-interval",
        "--sys-sampl-intv",
        type=int,
        default=1,
        help="Sampling interval to collect system metrics. Default value is 1 second",
    )

    parser.add_argument(
        "--power",
        "--pow",
        action="store_true",
        help="Enable power monitoring"
    )

    parser.add_argument(
        "--power-sampling-interval",
        "--pow-sampl-intv",
        type=int,
        default=250,
        help="Sampling interval to collect power metrics. Default value is 250 milliseconds",
    )

    parser.add_argument(
        "--call",
        action="store_true",
        help="Enable callstack tracing"
    )

    parser.add_argument(
        "--call-mode",
        type=str,
        default="dwarf",
        help="Call graph collection mode (dwarf, lbr, fp). Default: dwarf"
    )

    parser.add_argument(
        "--call-profiling-frequency",
        "--call-prof-freq",
        type=int,
        default=10,
        help="Profiling frequency. Default: 10 Hz"
    )

    parser.add_argument(
        "--sudo-g5k",
        action="store_true",
        help="Use super user space on Grid5000 clusters to run perf"
    )

    return parser.parse_args()

def get_benchmon_pid():
    """
    Get benchmon-run pid
    """
    filename = f"./.benchmon-run_pid_{JOBID}_{HOSTNAME}"
    with open(filename, 'w') as fn:
        fn.write(f"{PID}")

if __name__ == '__main__':
    print(f'benchmon-run version {benchmon.__version__}', sys.executable, str(sys.version).replace('\n', ' '))
    print("Beginning gathering of run context.")
    args = parse_args()
    get_benchmon_pid()

    rm = rc.RunMonitor(args)
    rm.run()
